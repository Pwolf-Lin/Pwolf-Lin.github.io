<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Azure的ChatGPT客户端搭建</title>
    <link href="/2023/05/19/Azure%E7%9A%84ChatGPT%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/19/Azure%E7%9A%84ChatGPT%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Azure的ChatGPT客户端搭建"><a href="#Azure的ChatGPT客户端搭建" class="headerlink" title="Azure的ChatGPT客户端搭建"></a>Azure的ChatGPT客户端搭建</h1><h3 id="说明几点："><a href="#说明几点：" class="headerlink" title="说明几点："></a>说明几点：</h3><blockquote><p><strong>主要使用的是微软的OpenAI和chatGPT-Next-Web客户端</strong></p><ul><li>详细申请注册过程参照博客园中的一篇<a href="https://www.cnblogs.com/qsing/p/17362395.html">文章</a>，里面有详细的申请过程；</li><li>关于申请完成后的相关配置，参见<a href="https://atlassc.net/2023/04/25/azure-openai-service">ShinChven’s Blog</a>，里面详细记载了作者的申请和配置；</li><li><a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web客户端</a>具有良好的交互界面，比chathub等客户端方便的多，还可以安装本地的浏览器app，手机网页版也可以直接连过去。</li></ul></blockquote><h3 id="终结点设置（Azure-OpenAI-API）"><a href="#终结点设置（Azure-OpenAI-API）" class="headerlink" title="终结点设置（Azure OpenAI API）"></a>终结点设置（Azure OpenAI API）</h3><p>这里设置参考<a href="https://github.com/haibbo/cf-openai-azure-proxy/blob/main/README.md">cf-openai-azure-proxy</a>项目进行cloudflare部署。可能部署过程后访问出现404，403现象，貌似并不影响使用，可以直接转到azure的endpoint。</p><h3 id="ChatGPT-Next-Web客户端源码修改记录"><a href="#ChatGPT-Next-Web客户端源码修改记录" class="headerlink" title="ChatGPT-Next-Web客户端源码修改记录"></a><a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web客户端</a>源码修改记录</h3><p>由于<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web客户端</a>主要是针对OpenAI的部署，对于Azure的OpenAI有部分冲突，这里记录一下：</p><ol><li>API Key不一样，OpenAI的key具有’sk-‘，而Azure没有，修改行数为app&#x2F;api&#x2F;common.ts中的第28行，删除’sk-‘即可：</li></ol><p><img src="https://driver.pwolf.tk/?/images/2023/05/19/KFw7LmIYGQ/28%E8%A1%8C.jpg"></p><ol start="2"><li>余额查询，Azure并不需要查询余额，所有直接删掉这一块内容。将app&#x2F;locales文件夹中的所有ts的143行至151行注释：</li></ol><p><img src="https://driver.pwolf.tk/?/images/2023/05/19/PIicbH7Z60/143.jpg"></p><ol start="3"><li>也是余额相关的，把app&#x2F;components&#x2F;settings.tsx的516行至538行注释掉：</li></ol><p><img src="https://driver.pwolf.tk/?/images/2023/05/19/nIETTrE6U6/516.jpg"></p><blockquote><p><strong>不想进一步修改界面，其实完成第一步就可以了，然后容器中部署</strong></p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li>部署在docker中进行，使用了<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web源码</a>中的Dockerfile文件直接构建镜像；</li><li>部署启动命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run -d -p 3000:3000 -e BASE_URL=<span class="hljs-string">&#x27;上面cf项目生成的网址&#x27;</span> -e OPENAI_API_KEY=<span class="hljs-string">&quot;azure中生成的密钥&quot;</span> -e CODE=<span class="hljs-string">&quot;页面访问密码&quot;</span> 上一步构建的镜像名称<br></code></pre></td></tr></table></figure></li></ol><p>最终完成部署后的样子如下，如果需要部署网页进行反代，参见<a href="https://blog.pwolf.site/2023/04/14/nginx%E5%8F%8D%E4%BB%A3%E8%AE%BE%E7%BD%AE/">nginx反代设置</a>。</p><p><img src="https://driver.pwolf.tk/?/images/2023/05/19/tCCwkOOrWi/end.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反代设置</title>
    <link href="/2023/04/14/nginx%E5%8F%8D%E4%BB%A3%E8%AE%BE%E7%BD%AE/"/>
    <url>/2023/04/14/nginx%E5%8F%8D%E4%BB%A3%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>一直习惯于使用宝塔的控制面板，最近发现暴露出弊端，不仅仅是网络上说的安全问题，同时自己的服务器属于底层低配机器，根本折腾不来宝塔，加上宝塔虽然方便，但是不明白具体配置文件编写，在这里记录一下：</p><h2 id="主要是修改-x2F-etc-x2F-nginx-x2F-nginx-conf"><a href="#主要是修改-x2F-etc-x2F-nginx-x2F-nginx-conf" class="headerlink" title="主要是修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf"></a>主要是修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</h2><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs htmlbars"><span class="language-xml"># 反代docker开的网站</span><br><span class="language-xml">server &#123;</span><br><span class="language-xml">    listen  80;</span><br><span class="language-xml">    server_name 域名(website);</span><br><span class="language-xml">    location / &#123;</span><br><span class="language-xml">            proxy_pass http://127.0.0.1:81;</span><br><span class="language-xml">            proxy_buffering off; # 防止一大段输出（这里主要是配置chatGPT客户端中打字机效果）</span><br><span class="language-xml">            proxy_set_header Host $proxy_host; # 修改转发请求头，让端口的应用可以受到真实的请求</span><br><span class="language-xml">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="language-xml">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">    # 防止爬虫抓取</span><br><span class="language-xml">    if ($http_user_agent ~* &quot;360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot&quot;) &#123;</span><br><span class="language-xml">    return 403;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml">server &#123;</span><br><span class="language-xml">    listen 80;</span><br><span class="language-xml">    server_name 域名(website);</span><br><span class="language-xml">    location / &#123;</span><br><span class="language-xml">            proxy_pass http://127.0.0.1:82;</span><br><span class="language-xml">            proxy_set_header Host $proxy_host; # 修改转发请求头，让端口的应用可以受到真实的请求</span><br><span class="language-xml">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="language-xml">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><p>将里面的端口号和域名(website)修改成对应的网址和端口即可，最后需要重置配置文件：</p><blockquote><p><strong>nginx -s reload</strong></p></blockquote><h2 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h2><p>nginx占用了80端口，申请证书时可以先关闭nginx，然后进行acme申请：</p><blockquote><p><strong>acme.sh –issue -d 域名 –standalone -k ec-256</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
